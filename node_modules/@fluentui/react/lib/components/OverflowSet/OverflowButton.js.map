{"version":3,"file":"OverflowButton.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { IKeytipProps } from '../../Keytip';\nimport { IOverflowSetItemProps, IOverflowSetProps } from './OverflowSet.types';\nimport { useConst } from '@fluentui/react-hooks';\n\nconst useKeytipRegistrations = (\n  persistedKeytips: { [uniqueID: string]: IKeytipProps },\n  keytipManager: KeytipManager,\n) => {\n  React.useEffect(() => {\n    Object.keys(persistedKeytips).forEach((keytipId: string) => {\n      const keytip = persistedKeytips[keytipId];\n      const uniqueID = keytipManager.register(keytip!, true);\n      // Update map\n      persistedKeytips[uniqueID] = keytip;\n      delete persistedKeytips[keytipId];\n    });\n    return () => {\n      // Delete all persisted keytips saved\n      Object.keys(persistedKeytips).forEach((uniqueID: string) => {\n        keytipManager.unregister(persistedKeytips[uniqueID]!, uniqueID, true);\n        delete persistedKeytips[uniqueID];\n      });\n    };\n  }, [persistedKeytips, keytipManager]);\n};\n\nexport const OverflowButton = (props: IOverflowSetProps) => {\n  const keytipManager: KeytipManager = KeytipManager.getInstance();\n  const { className, overflowItems, keytipSequences, itemSubMenuProvider, onRenderOverflowButton } = props;\n  const persistedKeytips = useConst<{ [uniqueID: string]: IKeytipProps }>({});\n\n  // Gets the subMenu for an overflow item\n  const getSubMenuForItem = React.useCallback(\n    (item: IOverflowSetItemProps) => {\n      // Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n      if (itemSubMenuProvider) {\n        return itemSubMenuProvider(item);\n      }\n      if (item.subMenuProps) {\n        return item.subMenuProps.items;\n      }\n      return undefined;\n    },\n    [itemSubMenuProvider],\n  );\n\n  const newOverflowItems = React.useMemo(() => {\n    let currentOverflowItems: IOverflowSetItemProps[] | undefined = [];\n\n    if (keytipSequences) {\n      overflowItems?.forEach(overflowItem => {\n        const keytip = (overflowItem as IOverflowSetItemProps).keytipProps;\n\n        if (keytip) {\n          // Create persisted keytip\n          const persistedKeytip: IKeytipProps = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n            hasDynamicChildren: keytip.hasDynamicChildren,\n            hasMenu: keytip.hasMenu,\n          };\n\n          if (keytip.hasDynamicChildren || getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = keytipManager.menuExecute.bind(\n              keytipManager,\n              keytipSequences,\n              overflowItem?.keytipProps?.keySequences,\n            );\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          // Add this persisted keytip to our internal list, use a temporary uniqueID (its content)\n          // uniqueID will get updated on register\n          persistedKeytips[persistedKeytip.content] = persistedKeytip;\n\n          // Add the overflow sequence to this item\n          const newOverflowItem = {\n            ...overflowItem,\n            keytipProps: {\n              ...keytip,\n              overflowSetSequence: keytipSequences,\n            },\n          };\n          currentOverflowItems?.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          currentOverflowItems?.push(overflowItem);\n        }\n      });\n    } else {\n      currentOverflowItems = overflowItems!;\n    }\n    return currentOverflowItems;\n  }, [overflowItems, getSubMenuForItem, keytipManager, keytipSequences, persistedKeytips]);\n\n  useKeytipRegistrations(persistedKeytips, keytipManager);\n\n  return <div className={className}>{onRenderOverflowButton(newOverflowItems)}</div>;\n};\n"]}