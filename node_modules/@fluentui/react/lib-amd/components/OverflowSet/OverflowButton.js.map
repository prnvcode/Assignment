{"version":3,"file":"OverflowButton.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { IKeytipProps } from '../../Keytip';\nimport { IOverflowSetItemProps, IOverflowSetProps } from './OverflowSet.types';\nimport { useConst } from '@fluentui/react-hooks';\n\nconst useKeytipRegistrations = (\n  persistedKeytips: { [uniqueID: string]: IKeytipProps },\n  keytipManager: KeytipManager,\n) => {\n  React.useEffect(() => {\n    Object.keys(persistedKeytips).forEach((keytipId: string) => {\n      const keytip = persistedKeytips[keytipId];\n      const uniqueID = keytipManager.register(keytip!, true);\n      // Update map\n      persistedKeytips[uniqueID] = keytip;\n      delete persistedKeytips[keytipId];\n    });\n    return () => {\n      // Delete all persisted keytips saved\n      Object.keys(persistedKeytips).forEach((uniqueID: string) => {\n        keytipManager.unregister(persistedKeytips[uniqueID]!, uniqueID, true);\n        delete persistedKeytips[uniqueID];\n      });\n    };\n  }, [persistedKeytips, keytipManager]);\n};\n\nexport const OverflowButton = (props: IOverflowSetProps) => {\n  const keytipManager: KeytipManager = KeytipManager.getInstance();\n  const { className, overflowItems, keytipSequences, itemSubMenuProvider, onRenderOverflowButton } = props;\n  const persistedKeytips = useConst<{ [uniqueID: string]: IKeytipProps }>({});\n\n  // Gets the subMenu for an overflow item\n  const getSubMenuForItem = React.useCallback(\n    (item: IOverflowSetItemProps) => {\n      // Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n      if (itemSubMenuProvider) {\n        return itemSubMenuProvider(item);\n      }\n      if (item.subMenuProps) {\n        return item.subMenuProps.items;\n      }\n      return undefined;\n    },\n    [itemSubMenuProvider],\n  );\n\n  const newOverflowItems = React.useMemo(() => {\n    let currentOverflowItems: IOverflowSetItemProps[] | undefined = [];\n\n    if (keytipSequences) {\n      overflowItems?.forEach(overflowItem => {\n        const keytip = (overflowItem as IOverflowSetItemProps).keytipProps;\n\n        if (keytip) {\n          // Create persisted keytip\n          const persistedKeytip: IKeytipProps = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n            hasDynamicChildren: keytip.hasDynamicChildren,\n            hasMenu: keytip.hasMenu,\n          };\n\n          if (keytip.hasDynamicChildren || getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = keytipManager.menuExecute.bind(\n              keytipManager,\n              keytipSequences,\n              overflowItem?.keytipProps?.keySequences,\n            );\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          // Add this persisted keytip to our internal list, use a temporary uniqueID (its content)\n          // uniqueID will get updated on register\n          persistedKeytips[persistedKeytip.content] = persistedKeytip;\n\n          // Add the overflow sequence to this item\n          const newOverflowItem = {\n            ...overflowItem,\n            keytipProps: {\n              ...keytip,\n              overflowSetSequence: keytipSequences,\n            },\n          };\n          currentOverflowItems?.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          currentOverflowItems?.push(overflowItem);\n        }\n      });\n    } else {\n      currentOverflowItems = overflowItems!;\n    }\n    return currentOverflowItems;\n  }, [overflowItems, getSubMenuForItem, keytipManager, keytipSequences, persistedKeytips]);\n\n  useKeytipRegistrations(persistedKeytips, keytipManager);\n\n  return <div className={className}>{onRenderOverflowButton(newOverflowItems)}</div>;\n};\n"]}